데이터 배이스(SQL 정리)
SELECT 열 이름
    FROM 테이블 이름
    WHERE 조건식
    GROUP BY 열 이름
    HAVING 조건식
    ORDER BY 열 이름
    LIMIT 숫자


USE '스키마(데이터베이스)명'


//SELECT 조회할 데이터(컬럼) 지정
SELECT * FROM 은 모든 데이커를 조회한다
아래 2줄은 같은기능을 한다
SELECT * FROM market_db.member;
SELECT * FROM member;

//WHERE 특정 조건만 조회하기
member 테이블에서 mem_number 컬럼 값이 5이상인 데이터 조회
SELECT * FROM WHERE mem_number >= 5;
이것을 근거로 (관계/논리)연산자 사용가능

//논리 연산자 AND,OR 사용 가능
SELECT true or false and false;
논리연산자 and or중 or이 우선순위를 가진다

//BETWEEN 범위표현식
SELECT * FROM member WHERE height between 160 and 165;
member 테이블에서 height 컬럼값이 160이상 165이하인 데이터 조회
between연산자로 특정범위의 데이터를 조회할 수 있다
하지만 인덱스를 사용할 수 없음

//IN() 여러값 매칭
아래 두줄은 같은 기능을 한다. (addr값이 경기, 전남, 경남인 데이터 조회)
SELECT * FROM WHERE addr in('경기', '전남', '경남');
SELECT * FROM member WHERE addr = '경기' and addr = '전남' and addr = '경남';
in 연산자는 동등비교(=)를 여러번 수행하는 효과를 가진다. 따라서 인덱스를 최적으로 활용가능

//LIKE 문자열의 일부 글자 검색
mem_name 컬럼 값이 '블'로 시작하는 4글자 글자 데이터 조회
SELECT * FROM member WHERE mem_name like '블___';
mem_name 컬럼 값이 '블'로 시작하는 모든 데이터 조회
SELECT * FROM member WHERE mem_name like '블%';
mem_name 컬럼 값에 '블'이 들어가는 모든 데이터 조회
SELECT * form member WHERE mem_name like '%블%';
_ 한글자만 매치
% 몇글자든 매치

//서브쿼리
SELECT mem_name, height FROM WHERE height > (SELECT height form member WHERE mem_name like '에어핑크');
SELECT height form member WHERE mem_name like '에어핑크'; 이 SQL문과 SELECT mem_name, height FROM WHERE height 이 SQL 문을 합쳐서 2개의 SQL문을 하나로 만듬

//ORDER BY 조회된 데이터 정렬
debut_date 값을 기준으로 정렬(기본 ASC)
SELECT *FROM member ORDER BY debut_date;
ORDER BY절은 데이터를 정렬함.
WHERE 절 다음에 나와야 함.
ASC(ascending order):오름차순 -> (생략시 기본값)
DESC(descending order):내림차순

SELECT * form member WHERE height >= 164 ORDER BY height desc, debut_date;
이런식으로 콤마를 사용하여 여러 정렬 조건 지정 가능

//LIMIT 출력 개수 제한
SELECT * FROM member LIMIT 3; 
상위 3건만 조회
SELECT * FROM member LIMIT 3, 2;
SELECT * FROM member LIMIT 2, offset 3;
3번째 데이터부터 2건만 조회
LIMIT 시작,개수
LIMIT 뒤에 하나의 숫자만 입력시 처음부터 입력한 수까지의 데이터만 가져옴
LIMIT 와 OFFSET 조합으로도 출력 개수를 제한할 수 있다.

//DISTINCT 중복데이터 제거
SELECT distinct addr form member;
DISTINCT를 열 이름앞에 붙이면 중복된 값은 1개만 출력된다.

//GROUP BY 그룹화
SELECT mem_id, sum(amount) as "합계" FROM buy GROUP BY mem_id ORDER BY mem_id;
컬럼이 같은 데이터를 그룹화 해주는 기능 보통 집계 함수와 같이 쓰임
/집계 함수(Aggregate Function)
SUM() 컬럼의 합계를 반환
AVG() 컬럼의 평균을 반환
MIN() 컬럼의 최소값을 반환
MAX() 컬럼의 최대값을 반환
COUNT() 행의 개수를 셈
COUNT(DISTINCT) 행의 개수를 셈
SELECT mem_id, SUM(amount*price) AS "총 금액" FROM buy GROUP BY mem_id ORDER BY mem_id;
집계함수 내에서 사칙연산도 가능하다.

//COUNT()
SELECT COUNT(*) FROM member;
member 테이블의 모든 데이터 개수를 셈
SELECT COUNT(phone1) FROM member;
member테이블의 phone1 컬럼이 NULL인 것을 제외한 모든 데이터 개수를 셈
COUNT(*) 연산은 모든 row를 대산으로 이루어지기 때문에 NULL값이 포함되어있어도 카운트됨
COUNT(phone1)연산은 phone1 값에 NULL이 있을 경우 카운트하지 않은

//HAVING 그룹조건
SELECT SUM(amount*prict) AS "총금액" FROM buy GROUP BY mem_id HAVING SUM(amount*price) >= 1000;
mem_id를 기준으로 그룹화
그룹화된 데이터를 기준으로 amount*price 합계가 1000 이상인 그룹만 남김
조건에 걸러진 그룹에서 amount*price 의 합계를 조회
그룹화된 데이터레 대해서 조건을 제한함
GROUP BY뒤에 와야함